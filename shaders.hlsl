/*
"SV_" means system value - written to by shader program, CPU can't modify them. Typically contain inputs / outputs from another shader stage, or generated by GPU during rasterization
"POSITION" means vertex buffer data
"SV_POSITION" provides a pixel position to the shader
"COLOR" for RGBA data given to a shader
"SV_TARGET" for writting from a pixel shader to a target texture
*/

cbuffer CBUFFER0
{
    float3 Offset;
    float packing;
};

struct VS_INPUT
{
    float4 vPos : POSITION;
    float4 vColor : COLOR;
};

struct VS_OUTPUT
{
    float4 vPos : SV_Position;
    float4 vColor : COLOR;
};

//Executed for eah vertex in a scene. Minimally returns in a 4-component position vector that gets rasterized into pixel position
VS_OUTPUT VShader(VS_INPUT input) //Vertex shader
{
    VS_OUTPUT output;
  
    output.vPos = input.vPos;
    output.vColor = input.vColor;
    
    output.vPos.xyz += Offset.xyz;
    
    return output;
}

//Executed for each pixel in a render target. Receives rasterized coordinates from previous shader stage. Returns a 4-component value for that pixel position (color)
float4 PShader (VS_OUTPUT vertex) : SV_Target
{
    float4 color = vertex.vColor;

    return color;
}

